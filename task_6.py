# -*- coding: utf-8 -*-
"""Task_6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/Sourav61/Goeduhub-Assignments/blob/main/Task_06.ipynb
"""

from google.colab import drive
drive.mount("/content/drive", force_remount=True)

"""Author: <a href = "https://github.com/Sourav61">Sourav Pahwa</a>
<br>ID: GO_STP_13420

<b>Task-6 <h1>Visualization using Python Matplotlib Library</h1></b>

<b>Q1) Load the necessary package for plotting using pyplot from matplotlib. <br/><br/>Example - Days(x-axis) represents 8 days and Speed represents a car’s speed. Plot a Basic line plot between days and car speed, put x axis label as days and y axis label as car speed and put title Car Speed Measurement.</b>
  <br />Days=[1,2,3,4,5,6,7,8]

  Speed=[60,62,61,58,56,57,46,63]​​​​​
"""

import numpy as np
import matplotlib.pyplot as plt

Days = np.array([1,2,3,4,5,6,7,8])
Speed = np.array([60,62,61,58,56,57,46,63])

plt.figure(figsize=(15,6))
plt.plot(Days,Speed,linewidth = 4,color='blue',linestyle=':',marker='o')

plt.xlabel('Days')
plt.ylabel('Car Speed')
plt.title('Car Speed Measurement')

plt.annotate('start point', xy=(1, 60), xycoords='data',xytext=(35, -90),
textcoords='offset points',arrowprops=dict(arrowstyle= '<->',
color='green',lw=2.5,ls='-'),
horizontalalignment='right', verticalalignment='bottom')
plt.annotate('low point', xy=(7, 46), xycoords='data',xytext=(15, 60),
textcoords='offset points',arrowprops=dict(arrowstyle= '<->',
color='green',lw=2.5,ls='-'),
horizontalalignment='right', verticalalignment='bottom')
plt.annotate('end point', xy=(8, 63), xycoords='data',xytext=(20, -100),
textcoords='offset points',arrowprops=dict(arrowstyle= '<->',
color='green',lw=2.5,ls='-'),
horizontalalignment='right', verticalalignment='bottom')

plt.show()

"""<b>Q2) Now to above car data apply some string formats  like line style example green dotted line, marker shape like +, change markersize, markerface color etc.</b>"""

plt.figure(figsize=(15,6))
plt.plot(Days,Speed,color='red',linewidth=4,linestyle='dashdot')

plt.scatter(Days,Speed,s=100,marker='*',c = 'm')
plt.xlabel('Days')
plt.ylabel('Car Speed')
plt.title('Car Speed Measurement')

plt.annotate('start point', xy=(1, 60), xycoords='data',xytext=(35, -90),
textcoords='offset points',arrowprops=dict(arrowstyle= '<->',
color='cyan',lw=3.5,ls='--'),
horizontalalignment='right', verticalalignment='bottom')
plt.annotate('low point', xy=(7, 46), xycoords='data',xytext=(15, 60),
textcoords='offset points',arrowprops=dict(arrowstyle= '<->',
color='cyan',lw=3.5,ls='--'),
horizontalalignment='right', verticalalignment='bottom')
plt.annotate('end point', xy=(8, 63), xycoords='data',xytext=(20, -100),
textcoords='offset points',arrowprops=dict(arrowstyle= '<->',
color='cyan',lw=3.5,ls='--'),
horizontalalignment='right', verticalalignment='bottom')

plt.show()

"""<b>Q3) Plot Axes Labels, Chart title, Legend, Grid in Car minimum, Maximum and average speed in 8 days.</b>

days=[1,2,3,4,5,6,7,8]

max_speed=[80,91,92,88,77,79,76,75]

min_speed=[42,43,40,42,33,36,34,35]

avg_speed=[46,58,57,56,40,42,41,36]
"""

days = np.array([1,2,3,4,5,6,7,8])
max_speed = np.array([80,91,92,88,77,79,76,75])
min_speed = np.array([42,43,40,42,33,36,34,35])
avg_speed = np.array([46,58,57,56,40,42,41,36])

fig, (ax1, ax2, ax3) = plt.subplots(nrows=3, ncols=1, figsize = (15,20))

ax1.plot(days,max_speed,linestyle='dashed', linewidth=4, c='m')
ax1.scatter(days,max_speed,color='red',marker='s')
ax1.set_title('Days vs Max Speed')
ax1.set_xlabel('Days')
ax1.set_ylabel('Max Speed')
ax2.yaxis.tick_right()

ax2.plot(days,min_speed, linestyle='-', linewidth=3, c='g')
ax2.scatter(days,min_speed,color='m',marker='o')
ax2.set_title('Days vs Min Speed')
ax2.set_xlabel('Days')
ax2.set_ylabel('Min Speed')
ax2.yaxis.tick_right()

ax3.plot(days,avg_speed, linestyle='-.', linewidth=2, c='r')
ax3.scatter(days,avg_speed,color='green',marker='H')
ax3.set_title('Days vs Average Speed')
ax3.set_xlabel('Days')
ax2.set_ylabel('Average Speed')
ax3.yaxis.tick_right()
fig.suptitle('Plots of Speed', y = 1.05, fontsize=16)
fig.tight_layout()

"""<b>Q4) Plotting a basic sine graph by adding more features. Adding Multiple plots by Superimposition like cosine wave.</b>"""

x = np.linspace(0,10,150)
y = np.sin(x)
z = np.cos(x)
plt.figure(figsize=(15,8))
plt.plot(x,y,'-.m', linewidth = 5)
plt.plot(x,z,'--c',linewidth = 4)
plt.xlabel("Angle in Radians")
plt.ylabel("Magnitude")
plt.title("Sine/Cosine function curve")
plt.legend(['Sine','Cosine'])
plt.show()

"""<b>Q5) Plot Simple bar chart showing popularity of Programming Languages.

Languages =['Python', 'SQL', 'Java', 'C++', 'JavaScript']

Popularity = [56, 39, 34, 34, 29]

Security = [44 ,36 ,55, 50, 42]

Plot Multiple Bars showing Popularity and Security of major Programming Languages. Also Create Horizontal bar chart using barh function.</b>
"""

Languages = ['Python', 'SQL', 'Java', 'C++', 'JavaScript']
Popularity = np.array([56, 39, 34, 34, 29])
Security = np.array([44 ,36 ,55, 50, 42])

gridsize = (2, 4)

fig = plt.figure(figsize=(15, 10))
ax1 = plt.subplot2grid(gridsize, (0, 0), colspan=2, rowspan=1)
ax2 = plt.subplot2grid(gridsize, (1, 0), colspan=2, rowspan=1)
ax3 = plt.subplot2grid(gridsize, (0, 2), colspan=2, rowspan=2)

ax1.bar(Languages,Popularity,color= 'm', edgecolor = 'r')
ax1.set_title('Barplot of Popularity', fontsize=15)
ax1.set_ylabel('Popularity')
ax1.yaxis.tick_right()

ax2.barh(Languages,Security,color= 'g', edgecolor = 'r')
ax2.set_title('Barplot of Security', fontsize=15)
ax2.set_ylabel('Security')
ax2.yaxis.tick_right()

ax3.hist(Popularity,color= 'c', edgecolor = 'r')
ax3.set_title('Histogram of Popularity', fontsize=15)
ax3.set_xlabel('Bins')
ax3.set_ylabel('Popularity')
ax3.yaxis.tick_right()

fig.suptitle('Programming Languages', y = 1.05, fontsize=25)

fig.tight_layout()

"""<b>Q6) Plot Histogram, We have a sample data of Students marks of various Students, we will try to plot number of Students by marks range and try to figure out how many Students are average, below-average and Excellent.
</b>
<br /><b>Marks = [ 61,86,42,46,73,95,65,78,53,92,55,69,70,49,72,86,64]

Histogram showing Below Average, Average and Execellent distribution</b>

40-60: Below Average

60-80: Average

80-100: Excellent
"""

Marks = np.array([61,86,42,46,73,95,65,78,53,92,55,69,70,49,72,86,64])
below_average = Marks[np.logical_and(Marks >= 40,Marks < 60)]
average = Marks[np.logical_and(Marks >= 60,Marks < 80)]
excellent = Marks[np.logical_and(Marks >= 80,Marks < 100)]

plt.figure(figsize=(12,6))
plt.hist(Marks, align='right', color='m', edgecolor='c')
plt.xlabel('Bins')
plt.ylabel('Marks')
plt.title('Histogram of Marks')
plt.vlines([40, 60, 80,100], ymin=0, ymax=4, colors='r',linestyles='-.')
plt.show()

print(f'No of Below Average students : {below_average.size}')
print(f'No of Average students : {average.size}')
print(f'No of Excellent students : {excellent.size}')

plt.figure(figsize=(15,10))
plt.hist(Marks, bins = [40, 60, 80,100], align='mid', color='m', edgecolor='b')
plt.xlabel('Bins', fontsize=30, c='b')
plt.ylabel('Marks', fontsize=30, c='r')
plt.title('Histogram of Marks', fontsize=40, c='c')
plt.show()

"""<b>Q7) Titanic Data Set Download Data

      Load the data file
</b><br/>
 (i) Create a pie chart presenting the male/female proportion. 

 (ii) Create a scatterplot with the Fare paid and the Age, differ the plot color by gender.
"""

import seaborn as sns
import pandas as pd

df = sns.load_dataset('titanic')

df.head()

df.tail()

df.columns

df.dtypes

df.info

df.describe(include="all")

plt.figure(figsize=(10,10))
df.sex.value_counts().plot.pie(autopct='%.0f%%',labels=['Male','Female'],shadow = True,
startangle = 90)
plt.title('Gender Ratio', fontsize='30')

df_male = df[df['sex'] == 'male']
df_male.sex.value_counts()

df_female = df[df['sex'] == 'female']
df_female.sex.value_counts()

plt.figure(figsize=(15,10))
plt.scatter(df_male.fare,df_male.age,
label='Male',color='m',marker='^')
plt.scatter(df_female.fare,df_female.age,
label='Female',color='r',marker='o')
plt.xlabel('Fare', fontsize=20, c='c')
plt.ylabel('Age', fontsize=20, c='b')
plt.title('Scatter Plot', fontsize=40, c='limegreen')
plt.legend()
plt.show()