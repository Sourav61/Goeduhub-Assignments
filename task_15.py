# -*- coding: utf-8 -*-
"""Task_15.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/Sourav61/Goeduhub-Assignments/blob/main/Task_15.ipynb
"""

from google.colab import drive
drive.mount('/content/drive')

"""Author: <a href = "https://github.com/Sourav61">Sourav Pahwa</a>
<br>ID: GO_STP_13420

<b>Build a spam filter using Python and the multinomial Naive Bayes algorithm. </b>

Check Spam or Ham? Email Classifier Using Python using MultinomialNB.

To Download the Dataset <a href="https://drive.google.com/file/d/1wr_soCWCZEOOzM9mJxYoTm9kySmAZAM4/view">click here.</a>
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
import missingno as msno
import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv("spam.csv")
df['length'] = df['Message'].apply(lambda x: len(x))

df.head(10)

df.tail(10)

df.info()

df.describe(include="all")

df.describe().style.background_gradient(cmap='PuBu_r', low=0, high=0, axis=0, subset=None, text_color_threshold=0.408, vmin=None, vmax=None)

def inspect_data(data):
    return pd.DataFrame({"Data Type":data.dtypes,"No of Levels":data.apply(lambda x: x.nunique(),axis=0), "Levels":data.apply(lambda x: str(x.unique()),axis=0)})
inspect_data(df)

df.boxplot(column='length')
plt.show()

df.hist(column='length')
plt.show()

df.kurt()

df.skew()

df.keys()

df.columns

df.axes

df.items

df.ndim

df.dtypes

df.duplicated().any()

df.duplicated().sum()

df.isna()

df.isnull().any()

df.isnull().sum()

msno.bar(df.sample(5572),color=(0.8, 0.4, 0.5, 0.9))
plt.show()

msno.matrix(df.sample(5572),color=(0.8, 0.2, 0.3))
plt.show()

plt.style.available

plt.rcParams['figure.figsize'] = (15, 5)
plt.style.use('seaborn-bright')

sns.countplot(df['Category'])
plt.xlabel('Category', fontsize = 15)

plt.style.use('seaborn-white')

df['Category'].value_counts().plot(kind = 'pie', explode = [0, 0.1], startangle = 90,
                                        labels=['Ham','Spam'],shadow = True, pctdistance = 0.5)
plt.legend()

plt.suptitle('Email Distribution', fontsize = 20)

plt.rcParams['figure.figsize'] = (15, 5)
plt.style.use('seaborn-white')

plt.subplot(1, 2, 1)
sns.countplot(df['length'])
plt.show()

plt.xlabel('length', fontsize = 15)

plt.subplot(1, 2, 2)
sns.distplot(df["length"], bins = 20)
plt.show()

sns.stripplot(x='Category', y='length', data=df)
plt.show()

sns.boxplot(x='Category', y='length', data = df, palette = 'flare_r')
plt.show()

plt.figure(figsize=(15,10))
sns.swarmplot(x = "Category", y = "length", data = df, palette = 'cool_r')
plt.show()

plt.rcParams['figure.figsize'] = (15, 5)
plt.style.use('ggplot')

sns.boxplot(x='Category', y='length', data = df, palette = 'CMRmap')
sns.swarmplot(x='Category', y='length', data = df, palette = 'icefire_r')
plt.show()

fig = px.histogram(df, 
                   x='length', 
                   marginal='box',
                   color='Category',
                   nbins=47, 
                   title='Length of Messages')
fig.update_layout(bargap=0.1)
fig.show()

fig = px.histogram(df, 
                   x='Message', 
                   marginal='box',
                   color='Category',
                   nbins=5157, 
                   title='Length of Messages')
fig.update_layout(bargap=0.1)
fig.show()

fig = px.scatter(df,
                 y='length',  
                 x='Message', 
                 color='Category', 
                 opacity=0.7, 
                 hover_data=['Category'], 
                 title='Message vs length')
fig.update_traces(marker_size=5)
fig.show()

px.histogram(df, x='length', color='Category', title='Spam Or Not')

sns.set_style("darkgrid")
sns.FacetGrid(df, hue="Category").map(plt.scatter, "Category","length").add_legend()
plt.show()

plt.close()
sns.FacetGrid(df, hue="Category").map(sns.distplot,"length").add_legend()
plt.show()

from sklearn.preprocessing import LabelEncoder
label_enc =LabelEncoder()

df.Category =label_enc.fit_transform(df.Category)

label_enc.classes_

df.head(10)

df.tail(10)

df.hist(column='Category')
plt.show()

df.corr()

fig = plt.figure(figsize = (12,10))
sns.heatmap(df.corr(), cmap='inferno', annot = True) 
plt.show()

corr = df.corr()
sns.heatmap((corr),
xticklabels=corr.columns.values,
yticklabels=corr.columns.values,cmap='Blues_r',annot=True,fmt=".2g")
plt.title('Heatmap of Correlation Matrix', fontsize=20)
corr

df.groupby('Category').mean()

df.groupby('Category').var()

df.groupby('Category').std()

df.groupby('Category').cov()

plt.figure(figsize=(14,14))
sns.heatmap(df.cov(), annot=True, fmt =".2f",square=True,cmap='flare_r')
plt.title("Covariation",fontsize = 15)
plt.show()

df.columns

sns.pairplot(df,
             x_vars = ['Category', 'length'],
             y_vars = ['Category', 'length'],
       diag_kind='kde',hue='Category', palette="hsv_r"
             )
plt.show()

from sklearn.feature_extraction.text import TfidfVectorizer

tfidf=TfidfVectorizer('english')
X = df['Message']
x = tfidf.fit_transform(X)
y = df['Category']

from sklearn.model_selection import train_test_split
xtrain,xtest,ytrain,ytest = train_test_split(x, y, test_size=0.2, random_state =9)

from sklearn.feature_extraction.text import TfidfTransformer
tfidf_transformer = TfidfTransformer()

x_train = tfidf_transformer.fit_transform(xtrain)

x_train.shape

from sklearn.naive_bayes import MultinomialNB
clf=MultinomialNB(alpha=0.03)

from sklearn.metrics import confusion_matrix, classification_report,accuracy_score
from sklearn.metrics import recall_score, precision_score, f1_score

clf.fit(xtrain,ytrain)

pred=clf.predict(xtest)

print("Accuracy Score :",accuracy_score(ytest,pred),'\n')
print("Recall Score",recall_score(ytest,pred),'\n')
print("Precision Score :",precision_score(ytest,pred),'\n')
print("F1 Score :",f1_score(ytest,pred),'\n')

cm = confusion_matrix(ytest, pred)

print(cm,"\n")

print(classification_report(ytest, pred))