# -*- coding: utf-8 -*-
"""Task_11.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/Sourav61/Goeduhub-Assignments/blob/main/Task_11.ipynb
"""

from google.colab import drive
drive.mount('/content/drive')

"""Author: <a href = "https://github.com/Sourav61">Sourav Pahwa</a>
<br>ID: GO_STP_13420
"""

#@title Predict Loan Eligibility for Dream Housing Finance company
print("""
Dream Housing Finance company deals in all kinds of home loans. They have presence across all urban, semi urban and rural areas. Customer first applies for home 
loan and after that company validates the customer eligibility for loan.

Company wants to automate the loan eligibility process (real time) based on customer detail provided while filling online application form. These details are
Gender, Marital Status, Education, Number of Dependents, Income, Loan Amount, Credit History and others. To automate this process, they have provided a dataset 
to identify the customers segments that are eligible for loan amount so that they can specifically target these customers.

[Dataset Link]("https://www.kaggle.com/ninzaami/loan-predication") """)

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import missingno as msno
import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv("loan_approval.csv")

df['Loan_Status'] = df['Loan_Status'].apply({'Y':1, 'N':0}.get)

df.head(10)

df.tail(10)

df.info()

df.describe(include="all")

df.describe().style.background_gradient(cmap='PuBu_r', low=0, high=0, axis=0, subset=None, text_color_threshold=0.408, vmin=None, vmax=None)

def inspect_data(data):
    return pd.DataFrame({"Data Type":data.dtypes,"No of Levels":data.apply(lambda x: x.nunique(),axis=0), "Levels":data.apply(lambda x: str(x.unique()),axis=0)})
inspect_data(df)

df.kurt()

df.skew()

df.keys()

df.columns

df.axes

df.items

df.ndim

df.boxplot(rot=45)
plt.show()

df.hist(figsize=(15,20),xrot=45,yrot=45)
plt.show()

df.dtypes

df.duplicated().any()

df.duplicated().sum()

df.isna()

df.isnull().any()

df.isnull().sum()

msno.bar(df.sample(613),color=(0.2, 0.4, 0.6, 0.6))
plt.show()

msno.matrix(df.sample(613),color=(0, 0, 1))
plt.show()

df['Gender'] = df['Gender'].fillna(df['Gender'].mode()[0])
df['Married'] = df['Married'].fillna(df['Married'].mode()[0])
df['Dependents'] = df['Dependents'].fillna(df['Dependents'].mode()[0])
df['Self_Employed'] = df['Self_Employed'].fillna(df['Self_Employed'].mode()[0])
df['LoanAmount'] = df['LoanAmount'].fillna(df['LoanAmount'].mode()[0])
df['Loan_Amount_Term'] = df['Loan_Amount_Term'].fillna(df['Loan_Amount_Term'].mode()[0])
df['Credit_History'] = df['Credit_History'].fillna(df['Credit_History'].mode()[0])

print("Number of Missing Values Left in the Training Data :", df.isnull().sum().sum())

plt.rcParams['figure.figsize'] = (15, 5)

msno.bar(df.sample(613),color=(0.2, 0.4, 0.6, 0.6))
plt.show()

msno.matrix(df.sample(613),color=(0, 0, 1))
plt.show()

df.corr()

fig = plt.figure(figsize = (12,10))
sns.heatmap(df.corr(), cmap='icefire', annot = True) 
plt.show()

corr = df.corr()
sns.heatmap((corr),
xticklabels=corr.columns.values,
yticklabels=corr.columns.values,cmap='cubehelix',annot=False,fmt=".2g")
plt.title('Heatmap of Correlation Matrix', fontsize=20)
corr

df.groupby('Loan_Status').mean()

df.groupby('Loan_Status').var()

df.groupby('Loan_Status').std()

df.groupby('Loan_Status').cov()

plt.figure(figsize=(14,14))
sns.heatmap(df.cov(), annot=True, fmt =".2f",square=True,cmap='rainbow_r')
plt.title("Covariation",fontsize = 15)
plt.show()

plt.rcParams['figure.figsize'] = (15, 5)
plt.style.use('fivethirtyeight')

plt.subplot(1, 2, 1)
sns.countplot(df['Gender'],)

plt.xlabel('Gender', fontsize = 15)

plt.subplot(1, 2, 2)
df['Gender'].value_counts().plot(kind = 'pie', explode = [0, 0.1], autopct = '%.2f%%', startangle = 90,
                                       labels = ['1','0'], shadow = True, pctdistance = 0.5)
plt.axis('off')

plt.suptitle('Count of Gender', fontsize = 20)
plt.legend()
plt.show()

plt.rcParams['figure.figsize'] = (15, 5)
plt.style.use('fivethirtyeight')

plt.subplot(1, 2, 1)
sns.countplot(df['Married'],)

plt.xlabel('Martial Status', fontsize = 15)

plt.subplot(1, 2, 2)
df['Married'].value_counts().plot(kind = 'pie', explode = [0, 0.1], autopct = '%.2f%%', startangle = 90,
                                       labels = ['1','0'], shadow = True, pctdistance = 0.5)
plt.axis('off')

plt.suptitle('Martial Status', fontsize = 20)
plt.legend()
plt.show()

plt.rcParams['figure.figsize'] = (15, 5)
plt.style.use('fivethirtyeight')

plt.subplot(1, 2, 1)
sns.countplot(df['Dependents'],)

plt.xlabel('Dependents', fontsize = 15)

plt.subplot(1, 2, 2)
df['Dependents'].value_counts().plot(kind = 'pie', explode = [0, 0, 0, 0.1], autopct = '%.2f%%', startangle = 90,
                                       labels = ['0','1','2','3+'], shadow = True, pctdistance = 0.5)
plt.axis('off')

plt.suptitle('Count of Dependents', fontsize = 20)
plt.legend()
plt.show()

plt.rcParams['figure.figsize'] = (15, 5)
plt.style.use('fivethirtyeight')

plt.subplot(1, 2, 1)
sns.countplot(df['Education'],)

plt.xlabel('Graduates', fontsize = 15)

plt.subplot(1, 2, 2)
df['Education'].value_counts().plot(kind = 'pie', explode = [0, 0.1], autopct = '%.2f%%', startangle = 90,
                                       labels = ['0','1'], shadow = True, pctdistance = 0.5)
plt.axis('off')

plt.suptitle('Count of Graduates', fontsize = 20)
plt.legend()
plt.show()

plt.rcParams['figure.figsize'] = (15, 5)
plt.style.use('fivethirtyeight')

plt.subplot(1, 2, 1)
sns.countplot(df['Self_Employed'],)

plt.xlabel('Self_Employed', fontsize = 15)

plt.subplot(1, 2, 2)
df['Self_Employed'].value_counts().plot(kind = 'pie', explode = [0, 0.1], autopct = '%.2f%%', startangle = 90,
                                       labels = ['0','1'], shadow = True, pctdistance = 0.5)
plt.axis('off')

plt.suptitle('Count of Self Employed People', fontsize = 20)
plt.legend()
plt.show()

plt.rcParams['figure.figsize'] = (15, 5)
plt.style.use('fivethirtyeight')

plt.subplot(1, 2, 1)
sns.countplot(df['Property_Area'],)

plt.xlabel('Property_Area', fontsize = 15)

plt.subplot(1, 2, 2)
df['Property_Area'].value_counts().plot(kind = 'pie', explode = [0, 0, 0.1], autopct = '%.2f%%', startangle = 90,
                                       labels = ['Urban','Rural','Semiurban'], shadow = True, pctdistance = 0.3)
plt.axis('off')

plt.suptitle('Distribution of Property Area', fontsize = 20)
plt.legend()
plt.show()

sns.pairplot(df, hue="Loan_Status", palette="CMRmap")
plt.show()

sns.pairplot(df,
             x_vars = [ 'Loan_Status', 'ApplicantIncome', 'CoapplicantIncome', 'LoanAmount', 'Loan_Amount_Term', 'Credit_History'],
             y_vars = ['Loan_Status', 'ApplicantIncome', 'CoapplicantIncome', 'LoanAmount', 'Loan_Amount_Term' ],
       diag_kind='kde', hue='Loan_Status'
             )
plt.show()

sns.stripplot(y='LoanAmount', x='Loan_Status', data=df)

fig, axarr = plt.subplots(3,2, figsize=(20,20))

sns.stripplot(y='LoanAmount', x='Loan_Amount_Term', data=df, hue=None, ax=axarr[0][0])
sns.stripplot(y='LoanAmount', x='Loan_Status', data=df, hue=None, ax=axarr[1][1])
sns.stripplot(y='Loan_Amount_Term', x='Loan_Status', data=df, hue=None, ax=axarr[1][0])
sns.stripplot(y='ApplicantIncome', x='Loan_Status', data=df, hue=None,  ax=axarr[0][1])
sns.stripplot(y='CoapplicantIncome', x='Loan_Status', data=df, hue=None, ax=axarr[2][0])
sns.stripplot(y='ApplicantIncome', x='Credit_History', data=df, hue=None, ax=axarr[2][1])
plt.show()

plt.rcParams['figure.figsize'] = (15, 5)
plt.style.use('fivethirtyeight')

plt.subplot(1, 2, 1)
sns.countplot(df['Loan_Status'],)

plt.xlabel('Loan Approved or not?', fontsize = 15)

plt.subplot(1, 2, 2)
df['Loan_Status'].value_counts().plot(kind = 'pie', explode = [0, 0.1], autopct = '%.2f%%', startangle = 90,
                                       labels = ['1','0'], shadow = True, pctdistance = 0.5)
plt.axis('off')

plt.suptitle('Target Class Balance', fontsize = 20)
plt.legend()
plt.show()

plt.figure(figsize = (14, 6)) 
plt.subplot(1,1,1)
sns.distplot(df["Loan_Status"], bins = 20)
plt.show()

df1 = df.select_dtypes('number').head(50)

x = df1.drop(columns='Loan_Status')
y = df1['Loan_Status']

from sklearn.model_selection import train_test_split
xtrain,xtest,ytrain,ytest = train_test_split(x,y,test_size=0.33,random_state =9)

from sklearn.tree import DecisionTreeClassifier

clf = DecisionTreeClassifier(random_state=9,max_depth=5)

clf.fit(xtrain, ytrain)

pred = clf.predict(xtest)
print(pred)

from sklearn.metrics import accuracy_score,recall_score,f1_score

print("accuracy = ", accuracy_score(ytest, pred))
print("recall_score = ",recall_score(ytest, pred))
print("F1 score = ",f1_score(ytest, pred))

from sklearn import svm
from sklearn.metrics import precision_recall_curve
from sklearn.metrics import plot_precision_recall_curve
from sklearn.metrics import average_precision_score
import matplotlib.pyplot as plt


classifier = svm.LinearSVC(random_state=9)
classifier.fit(xtrain, ytrain)
score = classifier.decision_function(xtest)

average_precision = average_precision_score(ytest, score)

print(f'Average precision-recall score: {average_precision}', "\n\n")

disp = plot_precision_recall_curve(classifier, xtest, ytest)
disp.ax_.set_title(f'2-class Precision-Recall curve: '
                   'AP={average_precision}')
plt.show()

from sklearn.metrics import confusion_matrix

cn = confusion_matrix(ytest, pred) 
print(cn)

from sklearn import tree
tree.plot_tree(clf)
plt.show()

text_representation = tree.export_text(clf)
print(text_representation)

trclf = DecisionTreeClassifier(max_depth=5,min_samples_leaf = 55)
trclf.fit(xtrain,ytrain)
ypred = trclf.predict(xtest)
print("Test Accuracy: ",accuracy_score(ytest,ypred))
print("Test F1 Score: ",f1_score(ytest,ypred))
print("Confusion Matrix on Test Data")
pd.crosstab(ytest, ypred, rownames=['True'], colnames=['Predicted'], margins=True)