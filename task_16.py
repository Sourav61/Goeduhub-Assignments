# -*- coding: utf-8 -*-
"""Task_16.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/Sourav61/Goeduhub-Assignments/blob/main/Task_16.ipynb
"""

from google.colab import drive
drive.mount('/content/drive')

"""Author: <a href = "https://github.com/Sourav61">Sourav Pahwa</a>
<br>ID: GO_STP_13420

Naive Bayes classifiers are built on Bayesian classification methods. These rely on Bayes's theorem, which is an equation describing the relationship of conditional probabilities of statistical quantities.

<b>Create a Model using Naive Bayes classifiers to predict whether a passenger on the titanic would have been survived or not.</b>

Dataset can be downloaded from <a href="https://www.kaggle.com/c/titanic/data">Kaggle.</a>
"""

import numpy as np
import pandas as pd
import seaborn as sns
import plotly.express as px
import matplotlib.pyplot as plt
import missingno as msno
import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv("train.csv")
df.head(10)

df.tail(10)

df.keys

df.info()

df.describe(include="all")

df.describe().style.background_gradient(cmap='autumn', low=0, high=0, axis=0, subset=None, text_color_threshold=0.408, vmin=None, vmax=None)

def inspect_data(data):
    return pd.DataFrame({"Data Type":data.dtypes,"No of Levels":data.apply(lambda x: x.nunique(),axis=0), "Levels":data.apply(lambda x: str(x.unique()),axis=0)})
inspect_data(df)

df.kurt()

df.skew()

df.keys()

df.columns

df.axes

df.items

df.ndim

df.boxplot(rot=45)
plt.show()

df.hist(figsize=(15,20),xrot=45,yrot=45)
plt.show()

df.dtypes

df.duplicated().any()

df.duplicated().sum()

df.isna()

df.isnull().any()

df.isnull().sum()

msno.bar(df.sample(891),color=(0.7, 0.4, 0.7, 0.7))
plt.show()

msno.matrix(df.sample(891),color=(0.5, 0.5, 0.9))
plt.show()

df['Age'] = df['Age'].fillna(df['Age'].mode()[0])
df['Cabin'] = df['Cabin'].fillna(df['Cabin'].mode()[0])
df['Embarked'] = df['Embarked'].fillna(df['Embarked'].mode()[0])

print("Number of Missing Values Left in the Training Data :", df.isnull().sum().sum())

msno.bar(df.sample(891),color=("#00FF11"))
plt.show()

msno.matrix(df.sample(891),color=(0.4, 0.8, 0.9))
plt.show()

df.corr()

fig = plt.figure(figsize = (12,10))
sns.heatmap(df.corr(), cmap='CMRmap', annot = True) 
plt.show()

corr = df.corr()
sns.heatmap((corr),
xticklabels=corr.columns.values,
yticklabels=corr.columns.values,cmap='gnuplot',annot=True,fmt=".2g")
plt.title('Heatmap of Correlation Matrix', fontsize=20)
corr

df.groupby('Survived').mean()

df.groupby('Survived').var()

df.groupby('Survived').std()

df.groupby('Survived').cov()

plt.figure(figsize=(14,14))
sns.heatmap(df.cov(), annot=True, fmt =".2f",square=True,cmap='PRGn')
plt.title("Covariation",fontsize = 15)
plt.show()

plt.style.available

plt.rcParams['figure.figsize'] = (15, 5)
plt.style.use('seaborn-bright')

plt.subplot(1, 2, 1)
sns.countplot(df['PassengerId'])
plt.show()

plt.xlabel('PassengerId', fontsize = 15)

plt.subplot(1,2,2)
sns.distplot(df["PassengerId"], bins = 20)
plt.show()

plt.rcParams['figure.figsize'] = (15, 5)
plt.style.use('seaborn-dark')

plt.subplot(1, 3, 1)
sns.countplot(df['Pclass'])
plt.show()

plt.xlabel('Pclass', fontsize = 15)

plt.subplot(1, 3, 2)
df['Pclass'].value_counts().plot(kind = 'pie', explode = [0, 0, 0.1], autopct = '%.2f%%', startangle = 90,
                                       labels = ['0','1','2'], shadow = True, pctdistance = 0.5)
plt.legend()

plt.subplot(1, 3, 3)
sns.distplot(df["Pclass"], bins = 20)
plt.show()

plt.rcParams['figure.figsize'] = (15, 5)
plt.style.use('fivethirtyeight')

plt.subplot(1, 3, 1)
sns.countplot(df['Sex'])
plt.show()

plt.xlabel('Sex', fontsize = 15)

plt.subplot(1, 3, 2)
df['Sex'].value_counts().plot(kind = 'pie', explode = [0, 0.1], startangle = 90,
                                        shadow = True, pctdistance = 0.5)
plt.legend()

plt.suptitle('Gender Classfication', fontsize = 20)

plt.rcParams['figure.figsize'] = (15, 5)
plt.style.use('seaborn-deep')

plt.subplot(1, 2, 1)
sns.countplot(df['Age'])
plt.show()

plt.xlabel('Age', fontsize = 15)

plt.subplot(1, 2, 2)
sns.distplot(df["Age"], bins = 20)
plt.show()

plt.rcParams['figure.figsize'] = (15, 5)
plt.style.use('seaborn-white')

plt.subplot(1, 3, 1)
sns.countplot(df['SibSp'])
plt.show()

plt.xlabel('SibSp', fontsize = 15)

plt.subplot(1, 3, 2)
df['SibSp'].value_counts().plot(kind = 'pie', explode = [0, 0, 0, 0, 0, 0, 0.1], startangle = 90,
                                       labels = ['0','1','2','3','4','5','8'], shadow = True, pctdistance = 0.5)
plt.legend()

plt.subplot(1,3,3)
sns.distplot(df["SibSp"], bins = 20)
plt.show()

plt.rcParams['figure.figsize'] = (15, 5)
plt.style.use('Solarize_Light2')

plt.subplot(1, 3, 1)
sns.countplot(df['Parch'])
plt.show()

plt.xlabel('Parch', fontsize = 15)

plt.subplot(1, 3, 2)
df['Parch'].value_counts().plot(kind = 'pie', explode = [0, 0, 0, 0, 0, 0, 0.1], startangle = 90,
                                        shadow = True, pctdistance = 0.5)
plt.legend()

plt.subplot(1,3,3)
sns.distplot(df["Parch"], bins = 20)
plt.show()

plt.rcParams['figure.figsize'] = (15, 5)
plt.style.use('seaborn-pastel')

plt.subplot(1, 2, 1)
sns.countplot(df['Ticket'])
plt.xlabel('Ticket', fontsize = 15)
plt.show()

plt.rcParams['figure.figsize'] = (15, 5)
plt.style.use('seaborn-colorblind')

plt.subplot(1, 2, 1)
sns.countplot(df['Fare'])
plt.show()

plt.xlabel('Fare', fontsize = 15)

plt.subplot(1,2,2)
sns.distplot(df["Fare"], bins = 20)
plt.show()

plt.rcParams['figure.figsize'] = (15, 5)
plt.style.use('seaborn-muted')

plt.subplot(1, 3, 1)
sns.countplot(df['Embarked'])
plt.xlabel('Embarked', fontsize = 15)

plt.subplot(1, 3, 2)
df['Embarked'].value_counts().plot(kind = 'pie', explode = [0, 0, 0.1],autopct='%.2f%%', startangle = 90,
                                       labels=['S','C','Q'], shadow = True, pctdistance = 0.5)

sns.set_style(style='white')

sns.pairplot(df,
             x_vars = ['Survived', 'PassengerId', 'Pclass', 'Age', 'SibSp', 'Parch', 'Fare'],
             y_vars = ['Survived', 'PassengerId', 'Pclass', 'Age', 'SibSp', 'Parch', 'Fare'],
       diag_kind='kde', hue='Survived',palette="OrRd_r"
             )
plt.show()

sns.stripplot(y='Age', x='Embarked', data=df)
plt.show()

sns.barplot(data=df)
plt.show()

sns.boxenplot(data=df)
plt.show()

sns.boxplot(data=df)
plt.show()

sns.catplot(data=df)
plt.show()

sns.countplot(data=df)
plt.show()

sns.displot(df)
plt.show()

sns.ecdfplot(df)
plt.show()

sns.factorplot(data=df)
plt.show()

sns.histplot(df)
plt.show()

sns.jointplot(data=df)
plt.show()

sns.kdeplot(data=df)
plt.show()

sns.lineplot(data=df)
plt.show()

sns.relplot(data=df)
plt.show()

sns.pointplot(data=df)
plt.show()

sns.scatterplot(data=df)
plt.show()

sns.stripplot(data=df)
plt.show()

sns.violinplot(data=df)
plt.show()

sns.boxplot(y='Age', x='Embarked', data = df, palette = 'magma')
plt.show()

plt.figure(figsize=(15,10))
sns.swarmplot(x = "Parch", y = "Age", data = df, palette = 'jet_r')
plt.show()

plt.rcParams['figure.figsize'] = (15, 5)
plt.style.use('ggplot')

sns.boxplot(y='Age', x='Embarked', data = df, palette = 'CMRmap')
sns.swarmplot(x = "Parch", y = "Age", data = df, palette = 'inferno_r')
plt.show()

plt.rcParams['figure.figsize'] = (15, 5)
plt.style.use('seaborn-dark-palette')

fig, axarr = plt.subplots(3,2, figsize=(20,20))

sns.stripplot(y='SibSp', x='Pclass', data=df, hue=None, ax=axarr[0][0])
sns.stripplot(y='Survived', x='Embarked', data=df, hue=None, ax=axarr[1][1])
sns.stripplot(y='Parch', x='Survived', data=df, hue=None, ax=axarr[1][0])
sns.stripplot(y='Pclass', x='Survived', data=df, hue=None,  ax=axarr[0][1])
sns.stripplot(y='SibSp', x='Survived', data=df, hue=None, ax=axarr[2][0])
sns.stripplot(y='Fare', x='Parch', data=df, hue=None, ax=axarr[2][1])
plt.show()

plt.rcParams['figure.figsize'] = (15, 5)
plt.style.use('seaborn-dark-palette')

plt.subplot(1, 3, 1)
sns.countplot(df['Survived'])
plt.show()

plt.xlabel('Survived', fontsize = 15)

plt.subplot(1, 3, 2)
df['Survived'].value_counts().plot(kind = 'pie', explode = [0, 0.1], startangle = 90,
                                        labels=['0','1'],shadow = True, pctdistance = 0.5)
plt.legend()

plt.subplot(1,3,3)
sns.distplot(df["Survived"], bins = 20)
plt.show()

plt.rcParams['figure.figsize'] = (15, 5)
plt.style.use('fivethirtyeight')


plt.suptitle('Target Class Balance', fontsize = 20)

plt.subplot(1, 3, 1)
sns.countplot(df['Survived'],)

plt.xlabel('Survived or not?', fontsize = 15)

plt.subplot(1, 3, 2)
df['Survived'].value_counts().plot(kind = 'pie', explode = [0, 0.1], autopct = '%.2f%%', startangle = 90,
                                       labels = ['1','0'], shadow = True, pctdistance = 0.5)
plt.axis('off')

plt.subplot(1, 3, 3)
sns.distplot(df["Survived"], bins = 20)
plt.show()

fig = px.histogram(df, 
                   x='Sex', 
                   marginal='box',
                   color='Survived',
                   nbins=47, 
                   title='Gender VS Survival Rate')
fig.update_layout(bargap=0.1)
fig.show()

fig = px.histogram(df, 
                   x='Age', 
                   marginal='box',
                   color='Survived',
                   nbins=47, 
                   title='Age VS Survival Rate')
fig.update_layout(bargap=0.1)
fig.show()

fig = px.histogram(df, 
                   x='Fare', 
                   marginal='box',
                   color='Survived',
                   nbins=47, 
                   title='Fare vs Survival Rate')
fig.update_layout(bargap=0.1)
fig.show()

fig = px.scatter(df,
                 x='Fare',  
                 y='Age', 
                 color='Survived', 
                 opacity=0.7, 
                 hover_data=['Sex'], 
                 title='Fare VS Age')
fig.update_traces(marker_size=5)
fig.show()

fig = px.scatter(df,
                 y='Cabin',  
                 x='Pclass', 
                 color='Embarked', 
                 opacity=0.7, 
                 hover_data=['Sex','Survived'], 
                 title='Cabin VS Passenger Class')
fig.update_traces(marker_size=5)
fig.show()

"""PassengerId	Survived	Pclass	Name	Sex	Age	SibSp	Parch	Ticket	Fare	Cabin	Embarked"""

from sklearn.preprocessing import LabelEncoder
label_enc =LabelEncoder()

df.Sex =label_enc.fit_transform(df.Sex)
df.Embarked =label_enc.fit_transform(df.Embarked)

label_enc.classes_

x = df.drop(['Survived','Name','Ticket','Cabin'], axis=1)
y = df['Survived']

from sklearn.model_selection import train_test_split
xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size = 0.3, random_state = 9)

from sklearn.naive_bayes import GaussianNB
model = GaussianNB()
model.fit(xtrain, ytrain)

pred = model.predict(xtest)

pred

from sklearn.metrics import confusion_matrix, classification_report,accuracy_score
from sklearn.metrics import recall_score, precision_score, f1_score

print("Accuracy Score :",accuracy_score(ytest,pred),'\n')
print("Recall Score",recall_score(ytest,pred),'\n')
print("Precision Score :",precision_score(ytest,pred),'\n')
print("F1 Score :",f1_score(ytest,pred),'\n')

cm = confusion_matrix(ytest, pred)

print(cm,"\n")

print(classification_report(ytest, pred))